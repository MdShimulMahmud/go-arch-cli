name: Release (clean)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    name: Run tests and formatting checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install modules
        run: go mod download

      - name: Run unit tests
        run: go test ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not gofmt'd. Run 'gofmt -w .' locally.";
            gofmt -s -l .;
            exit 1;
          fi

  release:
    name: Build, sign and publish
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install modules
        run: go mod download

      - name: Build artifacts
        run: |
          set -euo pipefail
          mkdir -p dist
          # linux/amd64
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-linux-amd64
          # linux/arm64
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-linux-arm64
          # darwin/amd64
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-darwin-amd64
          # darwin/arm64
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-darwin-arm64
          # windows/amd64
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-windows-amd64.exe

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS
          sha512sum * > SHA512SUMS

      - name: Generate SBOM
        run: |
          go install github.com/anchore/syft/cmd/syft@latest
          syft packages . -o spdx-json > dist/go-arch-cli-sbom.spdx.json

      - name: Install cosign
        run: |
          COSIGN_URL="https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          curl -sLo cosign "$COSIGN_URL"
          chmod +x cosign
          sudo mv cosign /usr/local/bin/cosign

      - name: Sign artifacts (keyless, OIDC)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cd dist
          for f in *; do
            # skip signing generated signature/cert files
            if [[ "$f" == *.sig || "$f" == *.pem ]]; then
              continue
            fi
            cosign sign-blob --yes "$f" --output-signature "${f}.sig" --output-certificate "${f}.pem" || true
          done

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
