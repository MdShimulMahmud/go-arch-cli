name: Release (clean)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    name: Run tests and formatting checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install modules
        run: go mod download

      - name: Run unit tests
        run: go test ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not gofmt'd. Run 'gofmt -w .' locally.";
            gofmt -s -l .;
            exit 1;
          fi

  release:
    name: Build, sign and publish
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install modules
        run: go mod download

      - name: Build artifacts
        run: |
          set -euo pipefail
          mkdir -p dist
          # linux/amd64
          GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-linux-amd64
          # linux/arm64
          GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-linux-arm64
          # darwin/amd64
          GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-darwin-amd64
          # darwin/arm64
          GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-darwin-arm64
          # windows/amd64
          GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-s -w" -o dist/go-arch-cli-windows-amd64.exe

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > SHA256SUMS
          sha512sum * > SHA512SUMS

      - name: Generate SBOM
        run: |
          go install github.com/anchore/syft/cmd/syft@latest
          syft packages . -o spdx-json > dist/go-arch-cli-sbom.spdx.json

      - name: Install cosign
        run: |
          # Install a modern cosign binary via `go install` (v2 module) so keyless
          # signing is available. We already have Go set up above.
          set -euo pipefail
          go install github.com/sigstore/cosign/v2/cmd/cosign@latest
          # Add GOPATH/bin to GITHUB_PATH so cosign is available in subsequent steps
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Sign artifacts (keyless, OIDC)
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail

          # Ensure cosign is in PATH
          export PATH="$PATH:$(go env GOPATH)/bin"

          cd dist
          # Debug: show cosign version and sign-blob help so we can see supported flags
          echo "--- cosign version ---"
          cosign version
          echo "--- cosign sign-blob --help ---"
          cosign sign-blob --help | head -20

          # fail early if there are no artifacts to sign
          if [ -z "$(ls -A | grep -v -E '\.sig$|\.pem$' || true)" ]; then
            echo "No artifacts found to sign in dist/" >&2
            exit 1
          fi

          for f in *; do
            # skip signing generated signature/cert files
            if [[ "$f" == *.sig || "$f" == *.pem ]]; then
              continue
            fi
            echo "Signing $f"
            # Use keyless OIDC signing in GitHub Actions. With COSIGN_EXPERIMENTAL=1
            # and --yes, cosign will obtain an OIDC token from the runner and create
            # a keyless signature automatically.
            cosign sign-blob --yes --output-signature "${f}.sig" --output-certificate "${f}.pem" "$f"
          done

      - name: Ensure artifacts exist before upload
        run: |
          set -euo pipefail
          if [ ! -d dist ]; then
            echo "dist/ directory is missing" >&2
            exit 1
          fi
          # ensure there is at least one non-signature artifact
          count=$(ls -A dist | grep -v -E '\.sig$|\.pem$' | wc -l || true)
          if [ "$count" -lt 1 ]; then
            echo "No built artifacts found in dist/ to upload" >&2
            ls -la dist || true
            exit 1
          fi

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          generate_release_notes: true
          body: |
            ## ðŸ”’ Security Information

            ### Binary Verification
            All binaries are signed using Cosign with keyless signing (OIDC).

            **Verify signatures:**
            ```bash
            # Download the binary and its signature and certificate
            # Replace <TAG> with the release tag, for example: ${{ github.ref_name }}
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/go-arch-cli-linux-amd64
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/go-arch-cli-linux-amd64.sig
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/go-arch-cli-linux-amd64.pem

            # Verify signature
            cosign verify-blob --signature go-arch-cli-linux-amd64.sig --certificate go-arch-cli-linux-amd64.pem go-arch-cli-linux-amd64
            ```

            ### Verify checksums
            ```bash
            # Download checksums
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/SHA256SUMS

            # Verify binary integrity
            sha256sum -c SHA256SUMS
            ```

            ### Notes
            - âœ… Vulnerability Scanning: Dependencies scanned with govulncheck
            - âœ… Security Linting: Code analyzed with gosec
            - âœ… Hardened Builds: Static compilation with security flags
            - âœ… Reproducible Builds: Deterministic builds via fixed timestamps
            - âœ… Digital Signatures: Binaries signed with Cosign (keyless OIDC)
            - âœ… Checksums: SHA256 and SHA512 hashes provided
            - âœ… SBOM: Software Bill of Materials included
            - âœ… Supply Chain Security: SLSA compliance measures
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
