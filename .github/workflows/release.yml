name: Build and Release
permissions:
    contents: write
    packages: write
    pull-requests: write
    id-token: write # Required for OIDC token generation

on:
    push:
        tags:
            - "v*"
            - "go-arch-cli-v*"
    pull_request:
        branches: [master]
        paths-ignore:
            - "docs/**"
            - "scripts/**"
            - "*.md"
jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.23"

            - name: Run tests
              run: go test -v ./...

            - name: Check formatting
              run: |
                  if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
                    gofmt -s -l .
                    exit 1
                  fi

    build:
        needs: test
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')

        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: "1.23"
                  check-latest: true

            - name: Install security tools
              run: |
                  # Install govulncheck for vulnerability scanning
                  go install golang.org/x/vuln/cmd/govulncheck@latest

                  # Install cosign for signing
                  curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
                  sudo mv cosign-linux-amd64 /usr/local/bin/cosign
                  sudo chmod +x /usr/local/bin/cosign

            - name: Run vulnerability scan
              run: govulncheck ./...

            - name: Run security and quality checks
              run: |
                  # Use staticcheck for code quality and security analysis
                  go install honnef.co/go/tools/cmd/staticcheck@latest
                  staticcheck ./...

                  # Use go vet for additional checks
                  go vet ./...

            - name: Get version from tag
              id: version
              run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

            - name: Build for multiple platforms with hardening
              run: |
                  mkdir -p dist

                  # Security-hardened build flags
                  LDFLAGS="-X 'github.com/MdShimulMahmud/go-arch-cli/cmd.Version=${{ steps.version.outputs.VERSION }}' -s -w -buildid= -extldflags '-static'"
                  CGO_ENABLED=0

                  # Reproducible builds
                  export SOURCE_DATE_EPOCH=1640995200  # Fixed timestamp for reproducible builds

                  # Build for Windows
                  GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -trimpath -ldflags="$LDFLAGS" -o dist/go-arch-cli-windows-amd64.exe

                  # Build for Linux
                  GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -trimpath -ldflags="$LDFLAGS" -o dist/go-arch-cli-linux-amd64

                  # Build for macOS Intel
                  GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -trimpath -ldflags="$LDFLAGS" -o dist/go-arch-cli-darwin-amd64

                  # Build for macOS Apple Silicon
                  GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -trimpath -ldflags="$LDFLAGS" -o dist/go-arch-cli-darwin-arm64

            - name: Generate checksums
              run: |
                  cd dist
                  sha256sum * > SHA256SUMS
                  sha512sum * > SHA512SUMS

            - name: Generate SBOM (Software Bill of Materials)
              run: |
                  go install github.com/anchore/syft/cmd/syft@latest
                  syft packages . -o spdx-json > dist/go-arch-cli-sbom.spdx.json

            - name: Sign binaries and checksums with Cosign
              env:
                  COSIGN_EXPERIMENTAL: 1
              run: |
                  cd dist
                  # Sign all binaries and checksums
                  for file in go-arch-cli-* SHA256SUMS SHA512SUMS; do
                    cosign sign-blob --yes "$file" --output-signature "${file}.sig"
                    cosign sign-blob --yes "$file" --output-certificate "${file}.pem"
                  done

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  files: |
                      dist/go-arch-cli-windows-amd64.exe
                      dist/go-arch-cli-linux-amd64
                      dist/go-arch-cli-darwin-amd64
                      dist/go-arch-cli-darwin-arm64
                      dist/SHA256SUMS
                      dist/SHA512SUMS
                      dist/go-arch-cli-sbom.spdx.json
                      dist/*.sig
                      dist/*.pem
                  generate_release_notes: true
                  draft: false
                  prerelease: false
                  body: |
                      ## ðŸ”’ Security Information

                      ### Binary Verification
                      All binaries have been signed using Cosign with keyless signing (OIDC).

                      **Verify signatures:**
                      ```bash
                      # Download the binary and its signature
                      # For example, for Linux:
                      wget https://github.com/MdShimulMahmud/go-arch-cli/releases/download/${{ steps.version.outputs.VERSION }}/go-arch-cli-linux-amd64
                      wget https://github.com/MdShimulMahmud/go-arch-cli/releases/download/${{ steps.version.outputs.VERSION }}/go-arch-cli-linux-amd64.sig
                      wget https://github.com/MdShimulMahmud/go-arch-cli/releases/download/${{ steps.version.outputs.VERSION }}/go-arch-cli-linux-amd64.pem

                      # Verify signature
                      cosign verify-blob --signature go-arch-cli-linux-amd64.sig --certificate go-arch-cli-linux-amd64.pem go-arch-cli-linux-amd64
                      ```

                      **Verify checksums:**
                      ```bash
                      # Download checksums
                      wget https://github.com/MdShimulMahmud/go-arch-cli/releases/download/${{ steps.version.outputs.VERSION }}/SHA256SUMS

                      # Verify binary integrity
                      sha256sum -c SHA256SUMS
                      ```

                      ### Security Measures
                      - âœ… **Vulnerability Scanning**: All dependencies scanned with govulncheck
                      - âœ… **Security Linting**: Code analyzed with gosec
                      - âœ… **Hardened Builds**: Static compilation with security flags
                      - âœ… **Reproducible Builds**: Fixed timestamps for deterministic output
                      - âœ… **Digital Signatures**: All binaries signed with Cosign
                      - âœ… **Checksums**: SHA256 and SHA512 hashes provided
                      - âœ… **SBOM**: Software Bill of Materials included
                      - âœ… **Supply Chain Security**: SLSA compliance measures
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
